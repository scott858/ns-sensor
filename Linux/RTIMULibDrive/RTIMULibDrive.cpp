////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include <RTIMULibDefs.h>
#include "RTIMULib.h"

using namespace std;

#include <iostream>
#include <fstream>

int main_()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (1) {
        //  poll at the rate recommended by the IMU

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

            if ((now - displayTimer) > 100000) {
                printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
                fflush(stdout);
                displayTimer = now;
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

const std::string currentDateTime()
{

  time_t now = time(0);

  struct tm tstruct;

  char buf[80];

  tstruct = *localtime(&now);

  strftime(buf, sizeof(buf), "%Y_%m_%d_%H_%M_%S", &tstruct);

  return buf;

}

void openFile(void)
{

  ofstream myfile;

  myfile.open(currentDateTime() + ".txt");
  myfile.close();

}

void writeImu(void)
{

  int sampleCount = 0;
  int sampleRate = 0;
  uint64_t rateTimer;
  uint64_t displayTimer;
  uint64_t now;

  //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
  //  Or, you can create the .ini in some other directory by using:
  //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
  //  where <directory path> is the path to where the .ini file is to be loaded/saved

  RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

  RTIMU *imu = RTIMU::createIMU(settings);

  if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
    printf("No IMU found\n");
    exit(1);
  }

  //  This is an opportunity to manually override any settings before the call IMUInit

  //  set up IMU

  imu->IMUInit();

  //  this is a convenient place to change fusion parameters

  imu->setSlerpPower(0.02);
  imu->setGyroEnable(true);
  imu->setAccelEnable(true);
  imu->setCompassEnable(true);

  //  set up for rate timer

  rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

  //  now just process data

  ofstream myfile;

  myfile.open("/mnt/data/imu/LSM9DS1_1/" + currentDateTime() + "_LSM9DS1.txt");

  myfile << "time[us], x_accel, y_accel, z_accel, x_gyro, y_gyro, z_gyro, x_compass, y_compass, z_compass, roll, pitch, yaw\n";

  char fileBuffer[200] = {0};

  while (1) {

    while (imu->IMURead()) {

      RTIMU_DATA imuData = imu->getIMUData();

      sampleCount++;

      now = RTMath::currentUSecsSinceEpoch();

      sprintf(fileBuffer,
              "%llu, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n",
              imuData.timestamp,
              imuData.accel.x(),
              imuData.accel.y(),
              imuData.accel.z(),
              imuData.gyro.x(),
              imuData.gyro.y(),
              imuData.gyro.z(),
              imuData.compass.x(),
              imuData.compass.y(),
              imuData.compass.z(),
              imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE,
              imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE,
              imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE);

      myfile << fileBuffer;

      if ((now - rateTimer) > 1000000) {

        sampleCount = 0;

        rateTimer = now;

        myfile.flush();

      }

    }

  }

}

int main()
{

  writeImu();

}

